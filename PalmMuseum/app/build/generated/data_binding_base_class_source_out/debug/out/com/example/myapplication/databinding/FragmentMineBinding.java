// Generated by view binder compiler. Do not edit!
package com.example.myapplication.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.myapplication.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentMineBinding implements ViewBinding {
  @NonNull
  private final LinearLayoutCompat rootView;

  @NonNull
  public final TextView exit;

  @NonNull
  public final RelativeLayout myUpdates;

  @NonNull
  public final View paddingView;

  @NonNull
  public final TextView tvUsername;

  @NonNull
  public final RelativeLayout updatePwd;

  private FragmentMineBinding(@NonNull LinearLayoutCompat rootView, @NonNull TextView exit,
      @NonNull RelativeLayout myUpdates, @NonNull View paddingView, @NonNull TextView tvUsername,
      @NonNull RelativeLayout updatePwd) {
    this.rootView = rootView;
    this.exit = exit;
    this.myUpdates = myUpdates;
    this.paddingView = paddingView;
    this.tvUsername = tvUsername;
    this.updatePwd = updatePwd;
  }

  @Override
  @NonNull
  public LinearLayoutCompat getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentMineBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentMineBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_mine, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentMineBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.exit;
      TextView exit = ViewBindings.findChildViewById(rootView, id);
      if (exit == null) {
        break missingId;
      }

      id = R.id.myUpdates;
      RelativeLayout myUpdates = ViewBindings.findChildViewById(rootView, id);
      if (myUpdates == null) {
        break missingId;
      }

      id = R.id.padding_view;
      View paddingView = ViewBindings.findChildViewById(rootView, id);
      if (paddingView == null) {
        break missingId;
      }

      id = R.id.tv_username;
      TextView tvUsername = ViewBindings.findChildViewById(rootView, id);
      if (tvUsername == null) {
        break missingId;
      }

      id = R.id.updatePwd;
      RelativeLayout updatePwd = ViewBindings.findChildViewById(rootView, id);
      if (updatePwd == null) {
        break missingId;
      }

      return new FragmentMineBinding((LinearLayoutCompat) rootView, exit, myUpdates, paddingView,
          tvUsername, updatePwd);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
